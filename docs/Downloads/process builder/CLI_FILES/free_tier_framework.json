{
  "framework": {
    "name": "Free-Tier Multi-Agent Orchestrator",
    "version": "1.0.0",
    "description": "Cost-optimized framework combining free tiers with local-first tools"
  },
  "quotaManagement": {
    "enabled": true,
    "trackingFile": ".ai/quota-tracker.json",
    "resetSchedule": "0 0 * * *",
    "warningThreshold": 0.8,
    "services": {
      "gemini_cli": {
        "dailyLimit": 1000,
        "priority": 1,
        "cost": "free",
        "useCase": "simple_tasks",
        "complexity": ["simple", "moderate"],
        "resetTime": "00:00 UTC"
      },
      "claude_code": {
        "dailyLimit": 25,
        "priority": 2,
        "cost": "premium",
        "costPerRequest": 0.15,
        "useCase": "complex_agentic",
        "complexity": ["complex"],
        "warningThreshold": 0.6,
        "requiresApproval": true,
        "resetTime": "00:00 UTC"
      },
      "aider_local": {
        "dailyLimit": "unlimited",
        "priority": 3,
        "cost": "free",
        "useCase": "development",
        "complexity": ["simple", "moderate"]
      },
      "ollama_local": {
        "dailyLimit": "unlimited",
        "priority": 4,
        "cost": "free",
        "useCase": "fallback",
        "complexity": ["simple", "moderate", "complex"]
      }
    }
  },
  "localModels": {
    "enabled": true,
    "provider": "ollama",
    "fallbackThreshold": 0.9,
    "models": {
      "coding": {
        "name": "codellama:7b-instruct",
        "use_case": "code generation, debugging",
        "memory_gb": 8,
        "speed": "medium"
      },
      "general": {
        "name": "llama3.1:8b",
        "use_case": "general reasoning, documentation",
        "memory_gb": 10,
        "speed": "medium"
      },
      "fast": {
        "name": "codegemma:2b",
        "use_case": "quick completions, simple tasks",
        "memory_gb": 4,
        "speed": "fast"
      }
    }
  },
  "serviceRotation": {
    "strategy": "priority_with_quota",
    "rotationRules": [
      {
        "condition": "quota_available",
        "action": "use_highest_priority"
      },
      {
        "condition": "quota_exceeded",
        "action": "fallback_to_next"
      },
      {
        "condition": "all_quotas_exceeded",
        "action": "use_local_models"
      }
    ]
  },
  "lanes": {
    "ai_coding": {
      "name": "AI Code Generation",
      "worktreePath": ".worktrees/ai-coding",
      "branch": "lane/ai-coding",
      "tools": {
        "primary": {
          "tool": "aider",
          "config": {
            "model_priority": ["gemini/gemini-1.5-pro", "ollama/codellama:7b-instruct"],
            "auto_commit": false,
            "edit_format": "diff"
          }
        },
        "fallback": {
          "tool": "continue",
          "config": {
            "provider": "ollama",
            "model": "codellama:7b-instruct"
          }
        }
      },
      "allowedPatterns": ["src/**", "lib/**", "tests/**"],
      "excludePatterns": ["*.md", "docs/**"],
      "preCommit": ["ruff check .", "black --check ."],
      "commitPrefix": "ai:"
    },
    "quality": {
      "name": "Code Quality",
      "worktreePath": ".worktrees/quality",
      "branch": "lane/quality",
      "tools": {
        "linting": {
          "javascript": "eslint --fix .",
          "python": "ruff check --fix .",
          "sql": "sqlfluff fix ."
        },
        "formatting": {
          "javascript": "prettier --write .",
          "python": "black .",
          "json": "jq '.' --indent 2"
        },
        "analysis": "sonar-scanner"
      },
      "allowedPatterns": ["**/*.js", "**/*.py", "**/*.sql", "**/*.ts"],
      "preCommit": ["npm test", "python -m pytest"],
      "commitPrefix": "quality:"
    },
    "security": {
      "name": "Security Scanning",
      "worktreePath": ".worktrees/security",
      "branch": "lane/security",
      "tools": {
        "sast": {
          "general": "semgrep --config=auto .",
          "python": "bandit -r .",
          "javascript": "eslint --ext .js,.ts --config security ."
        },
        "dependencies": {
          "npm": "npm audit --audit-level=moderate",
          "python": "safety check",
          "containers": "trivy fs ."
        },
        "secrets": "gitleaks detect --source ."
      },
      "allowedPatterns": ["**/*"],
      "preCommit": ["echo 'Security scan complete'"],
      "commitPrefix": "security:",
      "failOnVulnerabilities": true,
      "severityThreshold": "high"
    },
    "infrastructure": {
      "name": "Infrastructure as Code",
      "worktreePath": ".worktrees/infrastructure",
      "branch": "lane/infrastructure",
      "tools": {
        "provisioning": "tofu",
        "configuration": "ansible-playbook",
        "validation": "checkov -d .",
        "planning": "tofu plan"
      },
      "allowedPatterns": ["infrastructure/**", "*.tf", "*.yml", "*.yaml"],
      "preCommit": ["tofu validate", "checkov -d . --check CKV_*"],
      "commitPrefix": "infra:"
    },
    "documentation": {
      "name": "Documentation Generation",
      "worktreePath": ".worktrees/docs",
      "branch": "lane/docs",
      "tools": {
        "api_docs": "swagger-codegen generate -i api-spec.yaml -l html2 -o docs/api",
        "readme": "readme-generator",
        "changelog": "conventional-changelog"
      },
      "allowedPatterns": ["docs/**", "*.md", "README*", "CHANGELOG*"],
      "preCommit": ["markdownlint docs/"],
      "commitPrefix": "docs:"
    },
    "agentic_research": {
      "name": "Research & Analysis",
      "worktreePath": ".worktrees/research",
      "branch": "lane/research",
      "tools": {
        "primary": {
          "tool": "gemini_cli",
          "config": {
            "model": "gemini-1.5-pro",
            "context_window": "1M_tokens"
          }
        }
      },
      "taskComplexity": "simple",
      "costBudget": "$0/day",
      "allowedPatterns": ["docs/**", "research/**", "*.md"]
    },
    "agentic_architecture": {
      "name": "System Architecture & Complex Design",
      "worktreePath": ".worktrees/architecture",
      "branch": "lane/architecture",
      "tools": {
        "primary": {
          "tool": "claude_code",
          "config": {
            "model": "claude-sonnet-4",
            "thinking_mode": "ultrathink",
            "workflow": "research_plan_code",
            "sub_agents": true
          }
        },
        "research_support": {
          "tool": "gemini_cli",
          "config": {"model": "gemini-1.5-pro"}
        }
      },
      "taskComplexity": "complex",
      "requiresApproval": true,
      "costBudget": "$5/day",
      "warningThreshold": 0.6,
      "allowedPatterns": ["architecture/**", "design/**", "*.arch.md"]
    },
    "agentic_implementation": {
      "name": "AI-Powered Code Implementation",
      "worktreePath": ".worktrees/implementation",
      "branch": "lane/implementation",
      "tools": {
        "primary": {
          "tool": "aider",
          "config": {
            "model_priority": [
              "ollama/codellama:7b-instruct",
              "gemini/gemini-1.5-pro"
            ],
            "workflow": "tdd",
            "auto_commit": false
          }
        },
        "fallback": {
          "tool": "continue",
          "config": {
            "provider": "ollama",
            "model": "codegemma:2b"
          }
        }
      },
      "taskComplexity": "moderate",
      "costOptimized": true,
      "allowedPatterns": ["src/**", "lib/**", "tests/**"]
    }
  },
  "integration": {
    "testCommand": "npm test && python -m pytest",
    "deployCommand": "echo 'Deploy to staging'",
    "rollbackCommand": "git revert HEAD",
    "notificationWebhook": null,
    "slackChannel": null
  },
  "taskClassification": {
    "simple": {
      "description": "Single file edits, basic debugging, simple refactoring",
      "recommendedService": "gemini_cli",
      "examples": [
        "fix typo",
        "add logging",
        "format code",
        "simple bug fix",
        "add comments",
        "rename variables",
        "basic validation"
      ],
      "maxTokens": 2000,
      "estimatedCost": "$0.00"
    },
    "moderate": {
      "description": "Multi-file changes, feature implementation, code reviews",
      "recommendedService": "aider_local",
      "examples": [
        "implement API endpoint",
        "add test suite",
        "refactor class",
        "integrate third-party library",
        "database schema changes"
      ],
      "maxTokens": 8000,
      "estimatedCost": "$0.00"
    },
    "complex": {
      "description": "Architecture changes, research tasks, multi-agent workflows",
      "recommendedService": "claude_code",
      "examples": [
        "system redesign",
        "performance optimization",
        "security audit",
        "microservices architecture",
        "cross-system integration",
        "research and implement new technology"
      ],
      "maxTokens": 32000,
      "requiresApproval": true,
      "estimatedCost": "$0.15-$2.00"
    }
  },
  "agenticPatterns": {
    "research_plan_code": {
      "enabled": true,
      "description": "Three-phase approach for complex tasks",
      "phases": [
        {
          "name": "research",
          "service": "gemini_cli",
          "purpose": "information gathering",
          "cost": "free"
        },
        {
          "name": "plan",
          "service": "claude_code",
          "purpose": "architecture and planning",
          "cost": "premium",
          "requiresApproval": true
        },
        {
          "name": "implement",
          "service": "aider_local",
          "purpose": "code generation",
          "cost": "free"
        }
      ]
    },
    "sub_agents": {
      "enabled": true,
      "description": "Specialized agents for different aspects",
      "agents": {
        "researcher": {
          "service": "gemini_cli",
          "purpose": "information gathering",
          "complexity": ["simple", "moderate"]
        },
        "architect": {
          "service": "claude_code",
          "purpose": "system design and planning",
          "complexity": ["complex"],
          "requiresApproval": true
        },
        "implementer": {
          "service": "aider_local",
          "purpose": "code generation and implementation",
          "complexity": ["simple", "moderate"]
        },
        "reviewer": {
          "service": "local",
          "purpose": "quality checks and validation",
          "complexity": ["simple", "moderate", "complex"]
        }
      }
    },
    "tdd_workflow": {
      "enabled": true,
      "description": "Test-driven development with AI",
      "preferredService": "aider_local",
      "steps": ["write_tests", "run_tests", "implement", "refactor"],
      "fallbackService": "ollama_local"
    }
  }
}