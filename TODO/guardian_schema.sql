-- Guardian Trading System Database Schema
-- SQLite with WAL mode for durability and performance

PRAGMA journal_mode=WAL;
PRAGMA synchronous=NORMAL;
PRAGMA cache_size=10000;
PRAGMA foreign_keys=ON;

-- Core constraint repository
CREATE TABLE IF NOT EXISTS constraints (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    constraint_type TEXT NOT NULL CHECK(constraint_type IN ('market_quality', 'risk_management', 'system_health', 'broker_connectivity')),
    condition TEXT NOT NULL,  -- DSL expression
    severity TEXT NOT NULL DEFAULT 'warning' CHECK(severity IN ('info', 'warning', 'critical')),
    adaptive_threshold INTEGER NOT NULL DEFAULT 0,
    learning_enabled INTEGER NOT NULL DEFAULT 1,
    market_sessions TEXT,     -- JSON array: ["london", "ny", "tokyo"]
    symbols TEXT,            -- JSON array: ["EURUSD", "GBPUSD"] 
    metadata TEXT,           -- JSON object for extensibility
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    enabled INTEGER NOT NULL DEFAULT 1
);

-- Constraint evaluation history
CREATE TABLE IF NOT EXISTS constraint_runs (
    run_id INTEGER PRIMARY KEY AUTOINCREMENT,
    constraint_id TEXT NOT NULL,
    evaluated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    context TEXT NOT NULL,         -- JSON: trading context at evaluation time
    result TEXT NOT NULL,          -- JSON: {passed: bool, value: any, threshold: float}
    gate_score REAL,               -- 0-100 score from this constraint
    execution_time_ms INTEGER,
    FOREIGN KEY(constraint_id) REFERENCES constraints(id) ON DELETE CASCADE
);

-- System modes and transitions
CREATE TABLE IF NOT EXISTS mode_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    from_mode TEXT,
    to_mode TEXT NOT NULL,
    trigger_reason TEXT NOT NULL,
    gate_scores TEXT,              -- JSON: scores that triggered transition
    auto_triggered INTEGER NOT NULL DEFAULT 1
);

-- Agent decisions and consensus
CREATE TABLE IF NOT EXISTS agent_decisions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    situation_id TEXT NOT NULL,    -- links related decisions
    agent_name TEXT NOT NULL,
    recommended_action TEXT NOT NULL,
    confidence REAL NOT NULL CHECK(confidence BETWEEN 0.0 AND 1.0),
    reasoning TEXT,
    facts TEXT,                    -- JSON: supporting data
    consensus_action TEXT,         -- final decided action
    consensus_confidence REAL
);

-- Transport layer status and metrics
CREATE TABLE IF NOT EXISTS transport_metrics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    transport_name TEXT NOT NULL,  -- socket, named_pipe, csv_spool
    healthy INTEGER NOT NULL,
    latency_ms REAL,
    drop_rate_pct REAL,
    error_count INTEGER DEFAULT 0,
    last_error TEXT,
    messages_sent INTEGER DEFAULT 0,
    messages_acked INTEGER DEFAULT 0
);

-- Message buffer for store-and-forward
CREATE TABLE IF NOT EXISTS message_buffer (
    msg_id TEXT PRIMARY KEY,       -- idempotency key
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    priority INTEGER NOT NULL DEFAULT 5,
    transport_tried TEXT,          -- JSON array of transports attempted
    payload TEXT NOT NULL,         -- JSON message content
    checksum TEXT NOT NULL,        -- SHA256 of payload
    ack_received INTEGER DEFAULT 0,
    retry_count INTEGER DEFAULT 0,
    max_retries INTEGER DEFAULT 3,
    deadline_ts DATETIME           -- when to give up
);

-- Learning outcomes for adaptive thresholds
CREATE TABLE IF NOT EXISTS trading_outcomes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    decision_context TEXT NOT NULL,    -- JSON: market conditions, constraints active
    constraints_applied TEXT NOT NULL, -- JSON array of constraint IDs
    quality_score REAL,               -- 0-100 from quality gates
    action_taken TEXT,
    outcome_pnl REAL DEFAULT 0.0,
    outcome_success INTEGER DEFAULT 0,
    remediation_used TEXT,
    recovery_time_seconds REAL,
    market_regime TEXT                 -- high_vol, low_vol, trending, ranging
);

-- Insights generated by learning engine
CREATE TABLE IF NOT EXISTS insights (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    insight_type TEXT NOT NULL,        -- constraint_optimization, pattern_detection, threshold_tuning
    constraint_id TEXT,               -- if applicable
    recommendation TEXT NOT NULL,
    confidence REAL NOT NULL,
    evidence TEXT,                    -- JSON: supporting data
    applied INTEGER DEFAULT 0,
    applied_at DATETIME
);

-- Quality gate results
CREATE TABLE IF NOT EXISTS gate_evaluations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    gate_type TEXT NOT NULL,
    score REAL NOT NULL CHECK(score BETWEEN 0.0 AND 100.0),
    violations TEXT,                  -- JSON array of violations
    recommendations TEXT,             -- JSON array of recommendations
    context_snapshot TEXT             -- JSON: relevant context
);

-- Remediation execution tracking
CREATE TABLE IF NOT EXISTS remediation_runs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    started_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    completed_at DATETIME,
    playbook_name TEXT NOT NULL,
    trigger_alert TEXT,               -- what caused this remediation
    steps_executed TEXT,              -- JSON array of steps with results
    success INTEGER,
    error_message TEXT,
    recovery_verified INTEGER DEFAULT 0
);

-- Performance baselines for adaptive thresholds
CREATE TABLE IF NOT EXISTS performance_baselines (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    metric_name TEXT NOT NULL,
    market_regime TEXT,               -- context for baseline
    symbol TEXT,
    p50_value REAL,
    p95_value REAL,
    p99_value REAL,
    sample_count INTEGER,
    UNIQUE(metric_name, market_regime, symbol)
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_constraint_runs_time ON constraint_runs(evaluated_at);
CREATE INDEX IF NOT EXISTS idx_constraint_runs_id ON constraint_runs(constraint_id);
CREATE INDEX IF NOT EXISTS idx_mode_history_time ON mode_history(timestamp);
CREATE INDEX IF NOT EXISTS idx_transport_metrics_time ON transport_metrics(timestamp, transport_name);
CREATE INDEX IF NOT EXISTS idx_message_buffer_priority ON message_buffer(ack_received, priority, created_at);
CREATE INDEX IF NOT EXISTS idx_trading_outcomes_time ON trading_outcomes(timestamp);
CREATE INDEX IF NOT EXISTS idx_gate_evaluations_time ON gate_evaluations(timestamp, gate_type);

-- Views for common queries
CREATE VIEW IF NOT EXISTS current_transport_status AS
SELECT 
    transport_name,
    healthy,
    latency_ms,
    drop_rate_pct,
    error_count,
    last_error,
    timestamp as last_updated
FROM transport_metrics tm
WHERE timestamp = (
    SELECT MAX(timestamp) 
    FROM transport_metrics tm2 
    WHERE tm2.transport_name = tm.transport_name
);

CREATE VIEW IF NOT EXISTS active_constraints AS
SELECT * FROM constraints WHERE enabled = 1;

CREATE VIEW IF NOT EXISTS pending_messages AS
SELECT * FROM message_buffer 
WHERE ack_received = 0 
AND retry_count < max_retries 
AND (deadline_ts IS NULL OR deadline_ts > datetime('now'))
ORDER BY priority DESC, created_at ASC;

-- Trigger to update baseline statistics
CREATE TRIGGER IF NOT EXISTS update_performance_baseline
AFTER INSERT ON transport_metrics
BEGIN
    INSERT OR REPLACE INTO performance_baselines (
        metric_name, symbol, p95_value, sample_count, updated_at
    )
    SELECT 
        'transport_latency_ms',
        NEW.transport_name,
        (SELECT latency_ms FROM transport_metrics 
         WHERE transport_name = NEW.transport_name 
         ORDER BY latency_ms 
         LIMIT 1 OFFSET (SELECT COUNT(*) * 0.95 FROM transport_metrics WHERE transport_name = NEW.transport_name)),
        (SELECT COUNT(*) FROM transport_metrics WHERE transport_name = NEW.transport_name),
        datetime('now')
    WHERE NEW.latency_ms IS NOT NULL;
END;